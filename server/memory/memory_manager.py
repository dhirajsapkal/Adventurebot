import os
import json

class MemoryManager:
    def __init__(self, memory_file='memory.json'):
        self.memory_file = memory_file
        self.memory = self._load_memory()

    def _load_memory(self):
        """Load memory data from file."""
        try:
            with open(self.memory_file, 'r') as file:
                memory = json.load(file)
        except FileNotFoundError:
            memory = {}
        except Exception as e:
            print(f"Failed to load memory: {e}")
            memory = {}
        return memory

    def get_memory(self):
        """Retrieve current memory data."""
        return self.memory

    def update_memory(self, memory_update):
        """
        Update memory data with the provided dictionary.
        
        Parameters:
        memory_update (dict): Dictionary with data to update memory.
        """
        self.memory.update(memory_update)
        self._save_memory()  # Save updated memory data to file

    def _save_memory(self):
        """Save current memory data to file."""
        try:
            with open(self.memory_file, 'w') as file:
                json.dump(self.memory, file, indent=4)
        except Exception as e:
            print(f"Failed to save memory: {e}")

    def reset_memory(self):
        """Reset memory data to an empty dictionary and delete memory file."""
        self.memory = {}
        try:
            os.remove(self.memory_file)
        except Exception as e:
            print(f"Failed to reset memory: {e}")

    def update_training_status(self, status):
        """
        Update the training status of the TensorFlow model in memory.
        
        Parameters:
        status (dict): Dictionary with training status data.
        """
        self.memory['training_status'] = status
        self._save_memory()  # Save updated training status to file

    def get_training_status(self):
        """
        Retrieve the training status of the TensorFlow model from memory.
        
        Returns:
        dict: Dictionary with training status data.
        """
        return self.memory.get('training_status', {})

    def collect_new_data(self, user_input, model_response):
        """
        Collect new data for training the TensorFlow model.
        
        Parameters:
        user_input (str): The user input to the chatbot.
        model_response (str): The response generated by the TensorFlow model.
        """
        new_data = {
            'user_input': user_input,
            'model_response': model_response
        }
        self.update_memory({'new_data': new_data})

    def get_new_data(self):
        """
        Retrieve collected new data for training the TensorFlow model.
        
        Returns:
        list: A list of dictionaries with new data for training.
        """
        new_data = self.memory.get('new_data', [])
        self.update_memory({'new_data': []})
        return new_data